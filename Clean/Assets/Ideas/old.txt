library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity arith_unit is
    port(
        clk     : in  std_logic;
        reset_n : in  std_logic;
        start   : in  std_logic;
        sel     : in  std_logic;
        A, B, C : in  unsigned(7 downto 0);
        D       : out unsigned(31 downto 0);
        done    : out std_logic
    );
end arith_unit;

-- =============================================================================
-- =============================== COMBINATORIAL ===============================
-- =============================================================================

architecture combinatorial of arith_unit is
    component multiplier
        port(
            A, B : in  unsigned(7 downto 0);
            P    : out unsigned(15 downto 0)
        );
    end component;

    component multiplier16
        port(
            A, B : in  unsigned(15 downto 0);
            P    : out unsigned(31 downto 0)
        );
    end component;
	
signal m1, m2, m3, m4, m5, m6, x1, x2, x3, iB, iC : unsigned(15 downto 0) := (others => '0');
signal o1, o2, o3 : unsigned(31 downto 0) := (others => '0');

begin

first: multiplier16 port map(i1, i2, o1);
second: multiplier16 port map(i3, i4, o2);
third: multiplier16 port map(i5, i6, o3);

--clock: process(sel, i1, i2, i3, i4, i5, i6, o1, o2, o3, iA, iB, iC) is
--begin
--if (sel = '0') then
--	i1 <= iB;
--	i2 <= iC;
--	i3 <= iB;
--	i4 <= iC;
--	i5 <= o1(15 downto 0);
--	i6 <= o2(15 downto 0) + iA + iB;
--else
--	i1 <= iA;
--	i2 <= iA;
--	i3 <= o1(15 downto 0);
--	i4 <= o1(15 downto 0);
--	i5 <= iA + iA + iB;
--	i6 <= i5;
--end if;
--end process clock;

i1 <= iB when (sel = '0') else iA;
i2 <= iC when (sel = '0') else i1;
i3 <= iB when (sel = '0') else o1(15 downto 0);
i4 <= iC when (sel = '0') else o1(15 downto 0);
i5 <= o1(15 downto 0) when (sel = '0') else iA + iA + iB;
i6 <= o2(15 downto 0) + iA + iB when (sel = '0') else i5;

iA(7 downto 0) <= A;
iB(7 downto 0) <= B;
iC(7 downto 0) <= C;

D <= o3 when sel = '0' else o2 + o3;
done <= start;

end combinatorial;

-- =============================================================================
-- ============================= 1 STAGE PIPELINE ==============================
-- =============================================================================

architecture one_stage_pipeline of arith_unit is
    component multiplier
        port(
            A, B : in  unsigned(7 downto 0);
            P    : out unsigned(15 downto 0)
        );
    end component;

    component multiplier16
        port(
            A, B : in  unsigned(15 downto 0);
            P    : out unsigned(31 downto 0)
        );
    end component;

begin
end one_stage_pipeline;

-- =============================================================================
-- ============================ 2 STAGE PIPELINE I =============================
-- =============================================================================

architecture two_stage_pipeline_1 of arith_unit is
    component multiplier
        port(
            A, B : in  unsigned(7 downto 0);
            P    : out unsigned(15 downto 0)
        );
    end component;

    component multiplier16
        port(
            A, B : in  unsigned(15 downto 0);
            P    : out unsigned(31 downto 0)
        );
    end component;

begin
end two_stage_pipeline_1;

-- =============================================================================
-- ============================ 2 STAGE PIPELINE II ============================
-- =============================================================================

architecture two_stage_pipeline_2 of arith_unit is
    component multiplier
        port(
            A, B : in  unsigned(7 downto 0);
            P    : out unsigned(15 downto 0)
        );
    end component;

    component multiplier16_pipeline
        port(
            clk     : in  std_logic;
            reset_n : in  std_logic;
            A, B    : in  unsigned(15 downto 0);
            P       : out unsigned(31 downto 0)
        );
    end component;

begin
end two_stage_pipeline_2;
